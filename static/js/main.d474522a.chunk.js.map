{"version":3,"sources":["requests.js","axios.js","Row.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d474522a.chunk.js","sourcesContent":["const API_KEY = \"7e22cadbe42817491fc92d3aedce891c\";\r\n\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,               \r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n\r\n        baseURL: \"https://api.themoviedb.org/3\"\r\n   \r\n    });\r\n  \r\n\r\n\r\n    export default instance;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n\r\nfunction Row({title, fetchUrl,isLargeRow }) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n \r\n    useEffect(() => {\r\n\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts ={\r\n        height: \"700\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n                //https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url) => {\r\n\r\n\r\n                const urlParams =new URLSearchParams( new URL(url).search);\r\n                \r\n                setTrailerUrl(urlParams.get(\"v\"));\r\n\r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className =\"row\">\r\n            <h2>{title}</h2>\r\n            \r\n            <div className = \"row__posters\">\r\n                {movies.map((movie) => (\r\n                    <img \r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className = {`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        src={`${base_url}${\r\n                            isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                        alt ={movie.name} \r\n                    />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId= {trailerUrl} opts={opts} />}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css';\r\n\r\nfunction Banner() {\r\n\r\n    const [movie, setMovie] =  useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results\r\n                    [Math.floor(Math.random() * request.data.results.length -1)\r\n            ]\r\n        );\r\n        \r\n            return requests;\r\n    \r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header className =\"banner\"\r\n            style ={{\r\n\r\n                backgroundSize:\"cover\",\r\n                backgroundImage: `url(\r\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                    )`,\r\n                    backgroundPosition: \"center center\",\r\n            }}\r\n\r\n        >\r\n            <div className = \"banner__contents\">\r\n                 <h1 className = \"banner__title\">\r\n                     {movie?.title || movie?.name || movie?.original_name}\r\n                 </h1> \r\n                 <div className = \"banner__buttons\">\r\n                     <button className = \"banner__button\">Play</button>\r\n                     <button className = \"banner__button\">My List</button>\r\n                 </div>\r\n\r\n                 <h1 className = \"banner__description\">\r\n                   {truncate(movie?.overview , 150)}\r\n                 </h1>\r\n                 {/* descriptions */} \r\n            </div>\r\n\r\n            <div className =\"banner--fadeBottom\" />\r\n           \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import React, {useState, useEffect} from 'react';\r\nimport './Nav.css';\r\n\r\n\r\nfunction Nav() {\r\n\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100) {\r\n                handleShow(true);\r\n\r\n            } else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"Scroll\");\r\n        };\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className = {`nav ${show && \"nav__black\"}`}>\r\n            <img \r\n                className =\"nav__logo\"\r\n                src=\"https://drive.google.com/thumbnail?id=1dE7079C62JsGRx3DKMSzGEXFuE28232U\"\r\n                alt = \"Netflix Logo\"\r\n            />\r\n\r\n\r\n            <img \r\n                className =\"nav__avatar\"\r\n                src=\"https://drive.google.com/thumbnail?id=1J9U79nDmBnM6m-pM5e3_BzDF0f1wU1mH\"\r\n                alt = \"Netflix Logo\"\r\n            />\r\n            \r\n\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport './App.css';\nimport requests from './requests';\nimport Row from './Row';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n          <Banner />\n          <Row title = \"NETFLIX ORIGINALS\" fetchUrl ={requests.fetchNetflixOriginals} isLargeRow ={ true }/>\n          <Row title = \"Trending Now\" fetchUrl = {requests.fetchTrending}/>\n          <Row title = \"Action Movies\" fetchUrl = {requests.fetchActionMovies}/>\n          <Row title = \"Comedy Movies\" fetchUrl = {requests.fetchComedyMovies}/>\n          <Row title = \"Horror Movies\" fetchUrl = {requests.fetchHorrorMovies}/>\n          <Row title = \"Romance Movies\" fetchUrl = {requests.fetchRomanceMovies}/>\n          <Row title = \"Documentaries\" fetchUrl = {requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}